import 'package:chatApp/widgets/auth/auth_form.dart';

import 'package:flutter/material.dart';

import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

import 'package:flutter/services.dart';

class AuthScreen extends StatefulWidget {
  @override
  _AuthScreenState createState() => _AuthScreenState();
}

class _AuthScreenState extends State<AuthScreen> {
  final _auth = FirebaseAuth.instance; //Instance  to the firebase auth object
  bool _isLoading=false;
  void _submitAuthForm(
      String email, String userName, String password, bool isLogin,BuildContext ctx) async {
    AuthResult authResult;
    try {
      setState((){
        _isLoading=true;
      });
      if (isLogin) {
        authResult = await _auth.signInWithEmailAndPassword(
            email: email,
            password:
                password); //returns future to an auth result. so we use await that returns future
      } else {
        authResult = await _auth.createUserWithEmailAndPassword(
            email: email, password: password);
      }
      //Firestore.instance.collection('users').document.add('user').setData
      await Firestore.instance.collection('users').document(authResult.user.uid).setData({
        'userName':userName,//Basically we use create a coolection ;usefrs' add a docuent to the path .document(authResult.user.uid) which is the id of the usr generated by firebase
        'email':email,
      }
      );
    } on PlatformException catch (err) {
      var message = 'Error occured.pleaae try again!';
      if (err.message != null) message = err.message;
      Scaffold.of(ctx).showSnackBar(//We use context of auth form as data is rreceived from that form and not from flutter
        SnackBar(
          content: Text(message),
          backgroundColor: Theme.of(ctx).errorColor,
        ),
      );
      setState((){
        _isLoading=false;
      });
    } catch (err){
      print(err);
      setState((){
        _isLoading=false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Theme.of(context).primaryColor,
      body: AuthForm(_submitAuthForm,_isLoading),
    );
  }
}
